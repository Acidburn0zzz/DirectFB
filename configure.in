dnl Process this file with autoconf to produce a configure script.
AC_INIT(Makefile.am)

# Save this values here, since automake will set cflags later
cflags_set="${CFLAGS}set"
cxxflags_set="${CXXFLAGS}set"

dnl we need to AC_DIVERT_PUSH/AC_DIVERT_POP these variable definitions so they
dnl are available for $ac_help expansion (don't we all *love* autoconf?)
AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)dnl
#
# Making releases:
#   DIRECTFB_MICRO_VERSION += 1;
#   DIRECTFB_INTERFACE_AGE += 1;
#   DIRECTFB_BINARY_AGE += 1;
# if any functions have been added, set DIRECTFB_INTERFACE_AGE to 0.
# if backwards compatibility has been broken,
# set DIRECTFB_BINARY_AGE and DIRECTFB_INTERFACE_AGE to 0.
#
DIRECTFB_MAJOR_VERSION=0
DIRECTFB_MINOR_VERSION=9
DIRECTFB_MICRO_VERSION=3
DIRECTFB_INTERFACE_AGE=0
DIRECTFB_BINARY_AGE=0
DIRECTFB_VERSION=$DIRECTFB_MAJOR_VERSION.$DIRECTFB_MINOR_VERSION.$DIRECTFB_MICRO_VERSION
dnl
AC_DIVERT_POP()

AC_SUBST(DIRECTFB_MAJOR_VERSION)
AC_SUBST(DIRECTFB_MINOR_VERSION)
AC_SUBST(DIRECTFB_MICRO_VERSION)
AC_SUBST(DIRECTFB_INTERFACE_AGE)
AC_SUBST(DIRECTFB_BINARY_AGE)
AC_SUBST(DIRECTFB_VERSION)

# libtool versioning
LT_RELEASE=$DIRECTFB_MAJOR_VERSION.$DIRECTFB_MINOR_VERSION
LT_CURRENT=`expr $DIRECTFB_MICRO_VERSION - $DIRECTFB_INTERFACE_AGE`
LT_REVISION=$DIRECTFB_INTERFACE_AGE
LT_AGE=`expr $DIRECTFB_BINARY_AGE - $DIRECTFB_INTERFACE_AGE`

AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

# For automake.
VERSION=$DIRECTFB_VERSION
PACKAGE=DirectFB

AM_INIT_AUTOMAKE($PACKAGE, $VERSION, no-define)
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE
AC_DISABLE_STATIC
AM_PROG_LIBTOOL
AC_CANONICAL_HOST
AM_SANITY_CHECK
AC_ISC_POSIX
AM_PROG_CC_STDC
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_HEADER_STDC
AC_C_CONST


dnl Linux framebuffer
AC_CHECK_HEADER(linux/fb.h,,
  AC_MSG_ERROR([*** DirectFB requires Linux with framebuffer support.]))

dnl Threads
AC_CHECK_LIB(pthread, pthread_attr_init,
  THREAD_LIBS="$LIBS -lpthread"
  THREAD_CFLAGS="-D_REENTRANT",
  AC_MSG_ERROR([*** DirectFB requires libpthread.]))

dnl Dynamic Linker
AC_CHECK_LIB(dl, dlopen, ,
  AC_MSG_ERROR([*** DirectFB requires libdl.]))

if test "x$GCC" = xyes; then
  DFB_CFLAGS="-O3 -fexpensive-optimizations -ffast-math -Wall"
fi


dnl compiling for x86, asm checks and inb/outb/iopl
case "$host" in
i*86-*-*) have_x86=on ;;
*) have_x86=off ;;
esac


if test "x$have_x86" = xon; then
  AC_DEFINE(HAVE_INB_OUTB_IOPL)
  AC_MSG_CHECKING([for sys/io.h])
  AC_TRY_COMPILE([#include <sys/io.h>], [char x = inb(0);], 
    AC_DEFINE(HAVE_SYSIO)
    AC_MSG_RESULT(yes), 
    AC_MSG_RESULT(no))
fi

dnl Necessary for assembler sources
save_ac_ext="$ac_ext"
ac_ext=S


AC_ARG_ENABLE(debug, [  --enable-debug          enable debugging support [default=no]],, enable_debug=no)
if test "x$enable_debug" = xyes; then
    AC_DEFINE(DFB_DEBUG)
    DFB_CFLAGS="$DFB_CFLAGS -g3"
else
    DFB_CFLAGS="$DFB_CFLAGS -g0"
fi
AM_CONDITIONAL(ENABLE_DEBUG, test "x$enable_debug" = xyes)


have_mmx=$have_x86
AC_ARG_ENABLE(mmx,
[  --enable-mmx            enable MMX support [default=autodetect]],
  have_mmx=$enableval)

MMX=no

if test "x$have_mmx" = xon; then
  AC_MSG_CHECKING(whether the binutils support MMX)
  cp "$srcdir/src/gfx/generic/detect_MMX.s" conftest.S
  if AC_TRY_EVAL(ac_compile); then
    AC_DEFINE(USE_MMX)
    MMX=yes
    have_mmx=yes
    AC_MSG_RESULT(yes)
  else
    AC_MSG_RESULT(no)
    echo 2>&1 "****************************************************************"
    echo 2>&1 " The installed assembler does not supports the MMX command set. "
    echo 2>&1 " Update your binutils package, if you want to compile MMX code. "
    echo 2>&1 "****************************************************************"
    MMX=no
  fi
  rm conftest*
fi

AM_CONDITIONAL(BUILDMMX, test x$MMX = xyes)
ac_ext="$save_ac_ext"


dnl Test for libjpeg
  JPEG=no

  AC_ARG_ENABLE(jpeg, [  --enable-jpeg           build JPEG image provider [default=yes]], enable_jpeg="$enableval", enable_jpeg=yes)

  if test x$enable_jpeg = xyes; then
    if test -z "$LIBJPEG"; then
      AC_CHECK_LIB(jpeg, jpeg_destroy_decompress,
        jpeg_ok=yes,
        jpeg_ok=no)
      if test "$jpeg_ok" = yes; then
        AC_CHECK_HEADER(jpeglib.h,
	  jpeg_ok=yes,
          jpeg_ok=no)
        if test "$jpeg_ok" = yes; then
	  JPEG=yes
	  LIBJPEG='-ljpeg'
        else
	  JPEG=no
	  AC_MSG_WARN([*** JPEG header files not found. JPEG image provider will not be built.])
        fi
      else
	JPEG=no
        AC_MSG_WARN([*** JPEG library not found. JPEG image provider will not be built.])
      fi
    fi
  fi

  AM_CONDITIONAL(JPEG_PROVIDER, test x$JPEG = xyes)


dnl Test for libpng and libz
  PNG=no

  AC_ARG_ENABLE(png, [  --enable-png            build PNG image provider [default=yes]], enable_png="$enableval", enable_png=yes)

  if test x$enable_png = xyes; then

  dnl Test for libz
    if test -z "$LIBZ"; then
      AC_CHECK_LIB(z, gzsetparams,
        AC_CHECK_HEADER(zlib.h,
	  LIBZ='-lz',
	  AC_MSG_WARN([*** libz header files not found. PNG image provider will not be built.])),
        AC_MSG_WARN([*** libz not found. PNG image provider will not be built.]))
    fi

  dnl Test for libpng
    if test -z "$LIBPNG" && test -n "$LIBZ"; then
      AC_CHECK_LIB(png, png_read_info,
        AC_CHECK_HEADER(png.h,
	  png_ok=yes,
	  AC_MSG_WARN([*** PNG header files not found. PNG image provider will not be built.])),
        AC_MSG_WARN([*** PNG library not found. PNG image provider will not be built.]))
      if test "$png_ok" = yes; then
        AC_MSG_CHECKING([for png_structp in png.h])
        AC_TRY_COMPILE([#include <png.h>],
          [png_structp pp;
	   png_infop info;
	   png_colorp cmap;
	   png_create_read_struct;],
          png_ok=yes, png_ok=no)
        AC_MSG_RESULT($png_ok)
        if test "$png_ok" = yes; then
	  PNG=yes
          LIBPNG="-lpng $LIBZ"
        else
	  PNG=NO
          AC_MSG_WARN([*** PNG library is too old. PNG image provider will not be built.])
        fi
      else
	PNG=NO
      fi
    fi

  fi

  AM_CONDITIONAL(PNG_PROVIDER, test x$PNG = xyes)


dnl Allow to disable GIF support
  AC_ARG_ENABLE(gif, [  --enable-gif            build GIF image provider [default=yes]], enable_gif="$enableval", enable_gif=yes)
 
  AM_CONDITIONAL(GIF_PROVIDER, test x$enable_gif = xyes)


dnl Test for freetype
  AC_ARG_ENABLE(freetype, [  --enable-freetype       build FreeType2 font provider [default=yes]], enable_freetype="$enableval", enable_freetype=yes)

  if test x$enable_freetype = xyes; then
    AC_PATH_PROG(FREETYPE_CONFIG, freetype-config, no)
    if test "$FREETYPE_CONFIG" = no; then
      FREETYPE=no
      AC_MSG_WARN(["*** freetype-config not found -- FreeType font provider will not be built."])
    else
      FREETYPE=yes
      FREETYPE_CFLAGS=`freetype-config --cflags`
      FREETYPE_LIBS=`freetype-config --libs`
    fi
  fi

  AM_CONDITIONAL(FREETYPE_PROVIDER, test x$FREETYPE = xyes)


dnl Test for avifile
  AC_ARG_ENABLE(avifile, [  --enable-avifile        build AviFile video provider [default=auto]], enable_avifile="$enableval", enable_avifile=yes)

  if test x$enable_avifile = xyes; then
    AC_PATH_PROG(AVIFILE_CONFIG, avifile-config, no)
    if test x$AVIFILE_CONFIG = xno; then
      AVIFILE=no
      AC_MSG_WARN(["*** avifile-config not found -- AVI media provider will not be built."])
    else
      AC_PROG_CXX
      AVIFILE=yes
      AVIFILE_CFLAGS=`avifile-config --cflags`
      AVIFILE_LIBS="`avifile-config --libs` -lstdc++"
    fi
  fi

  AM_CONDITIONAL(AVIFILE_PROVIDER, test x$AVIFILE = xyes)


dnl Test for libflash
  FLASH=no

  if test -z "$LIBFLASH"; then
    AC_CHECK_LIB(flash, FlashGetInfo,
      AC_CHECK_HEADER(flash.h,
	FLASH=yes
	LIBFLASH='-lflash',
	AC_MSG_WARN([*** libflash headers not found -- SWF media provider will not be built.])),
      AC_MSG_WARN([*** libflash not found -- SWF media provider will not be built.]), $LIBJPEG $LIBZ -lm)
  fi

AM_CONDITIONAL(FLASH_PROVIDER, test x$FLASH = xyes)


dnl Test for libmpeg3
  MPEG3=no

  AC_ARG_WITH(libmpeg3, [  --with-libmpeg3=path    path to libmpeg3 build])
  case "x$with_libmpeg3" in
    x)
      LIBMPEG3_DIR=
      ;;
    *)  
      LIBMPEG3_DIR=$with_libmpeg3
      MPEG3=yes
      ;;
  esac  

  AC_SUBST(LIBMPEG3_DIR)

  AM_CONDITIONAL(LIBMPEG3_PROVIDER, test x$MPEG3 = xyes)



dnl Test for ati framebuffer support in the kernel
AC_EGREP_CPP(yes, [
#include <linux/fb.h>
#ifdef FB_ACCEL_ATI_RAGE128
  yes
#endif
], ati=yes, 
  ati=no
  AC_MSG_WARN(*** ATI Rage 128 gfxdriver will not be built.))

AM_CONDITIONAL(GFX_ATI, test x$ati = xyes)


dnl Test for matrox framebuffer support in the kernel
AC_EGREP_CPP(yes, [
#include <linux/fb.h>
#ifdef FB_ACCEL_MATROX_MGAG200
  yes
#endif
], matrox=yes, 
  matrox=no  
  AC_MSG_WARN(*** Matrox G200/400 gfxdriver will not be built.))

AM_CONDITIONAL(GFX_MATROX, test x$matrox = xyes)


dnl Test for tdfx framebuffer support in the kernel
AC_EGREP_CPP(yes, [
#include <linux/fb.h>
#ifdef FB_ACCEL_3DFX_BANSHEE
  yes
#endif
], tdfx=yes, 
  tdfx=no  
  AC_MSG_WARN(*** 3DFX Voodoo/Banshee gfxdriver will not be built.))

AM_CONDITIONAL(GFX_TDFX, test x$tdfx = xyes)


DFB_CFLAGS="$THREAD_CFLAGS $DFB_CFLAGS"
DFB_CXXFLAGS="$DFB_CFLAGS"

if test x$cflags_set != xset ; then
  DFB_CFLAGS="$DFB_CFLAGS $CFLAGS"
fi

if test x$cxxflags_set != xset ; then
  DFB_CXXFLAGS="$DFB_CXXFLAGS $CXXFLAGS"
fi

DFB_LDFLAGS="$LDFLAGS"


# Honor aclocal flags
ACLOCAL="$ACLOCAL $ACLOCAL_FLAGS"


DATADIR=$datadir/directfb
LIBDIR=$libdir/directfb

AC_SUBST(DFB_CFLAGS)
AC_SUBST(DFB_LDFLAGS)
AC_SUBST(DFB_CXXFLAGS)
AC_SUBST(THREAD_LIBS)
AC_SUBST(GIF_PROVIDER)
AC_SUBST(JPEG_PROVIDER)
AC_SUBST(PNG_PROVIDER)
AC_SUBST(LIBJPEG)
AC_SUBST(LIBZ)
AC_SUBST(LIBPNG)
AC_SUBST(FREETYPE_PROVIDER)
AC_SUBST(FREETYPE_CFLAGS)
AC_SUBST(FREETYPE_LIBS)
AC_SUBST(AVIFILE_PROVIDER)
AC_SUBST(AVIFILE_CFLAGS)
AC_SUBST(AVIFILE_LIBS)
AC_SUBST(LIBMPEG3_LIBS)
AC_SUBST(LIBFLASH)
AC_SUBST(GFX_ATI)
AC_SUBST(GFX_MATROX)
AC_SUBST(GFX_TDFX)

AC_SUBST(DATADIR)
AC_SUBST(LIBDIR)

AC_OUTPUT([
directfb-config
directfb.pc
directfb-avifile.pc
directfb-swf.pc
Makefile
examples/Makefile
examples/df_knuckles/Makefile
examples/df_neo/Makefile
examples/spacedream/Makefile
include/Makefile
include/directfb_version.h
patches/Makefile
src/Makefile
src/display/Makefile
src/media/Makefile
src/windows/Makefile
src/input/Makefile
src/misc/Makefile
src/gfx/Makefile
src/gfx/generic/Makefile
src/core/Makefile
gfxdrivers/Makefile
gfxdrivers/ati128/Makefile
gfxdrivers/matrox/Makefile
gfxdrivers/neomagic/Makefile
gfxdrivers/tdfx/Makefile
inputdrivers/Makefile
inputdrivers/joystick/Makefile
inputdrivers/keyboard/Makefile
inputdrivers/ps2mouse/Makefile
inputdrivers/serialmouse/Makefile
interfaces/Makefile
interfaces/IDirectFBFont/Makefile
interfaces/IDirectFBImageProvider/Makefile
interfaces/IDirectFBVideoProvider/Makefile
tools/Makefile
docs/Makefile
], [chmod +x directfb-config])


AC_MSG_RESULT([
Build options: 
  MMX support       $MMX
  Debug mode        $enable_debug

Building Image Providers:
  JPEG              $JPEG
  PNG               $PNG
  GIF               $enable_gif 

Building Video Providers:
  AviFile           $AVIFILE
  libmpeg3          $MPEG3
  Flash             $FLASH
  Video4Linux       yes

Building Font implementations:
  FreeType2         $FREETYPE

Building Graphics Drivers:
  Matrox G200/G400  $matrox
  ATI Rage 128      $ati
  NeoMagic          yes
  3Dfx Voodoo       $tdfx
]);
